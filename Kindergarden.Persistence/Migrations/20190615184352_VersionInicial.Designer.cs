// <auto-generated />
using System;
using Kindergarden.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kindergarden.Persistence.Migrations
{
    [DbContext(typeof(KindergardenContext))]
    [Migration("20190615184352_VersionInicial")]
    partial class VersionInicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Kindergarden.Domain.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Section")
                        .HasMaxLength(10);

                    b.Property<int?>("TeacherId");

                    b.Property<int>("TimeSpan");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.IndividualGroup", b =>
                {
                    b.Property<int>("FamilyMemberId");

                    b.Property<int>("GroupId");

                    b.HasKey("FamilyMemberId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("IndividualGroup");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Confirmed");

                    b.Property<DateTime?>("ConfirmedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("Read");

                    b.Property<DateTime?>("ReadDate");

                    b.Property<int?>("RegardingId");

                    b.Property<int>("SentById");

                    b.Property<DateTime>("SentDate");

                    b.Property<int>("SentToId");

                    b.Property<string>("Text");

                    b.Property<int?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("RegardingId");

                    b.HasIndex("SentById");

                    b.HasIndex("SentToId");

                    b.HasIndex("TypeId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.MessageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("MessageTypes");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GroupId");

                    b.Property<int?>("ReceiverId");

                    b.Property<DateTime>("SentDate");

                    b.Property<string>("Text");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocumentId");

                    b.Property<int?>("DocumentTypeId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("PersonType");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Persons");

                    b.HasDiscriminator<int>("PersonType");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.PersonNotification", b =>
                {
                    b.Property<int>("NotificationId");

                    b.Property<int>("ReceiverId");

                    b.Property<bool>("Confirmed");

                    b.Property<DateTime?>("ConfirmedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("Read");

                    b.Property<DateTime?>("ReadDate");

                    b.HasKey("NotificationId", "ReceiverId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("PersonNotification");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanSendMessage");

                    b.Property<bool>("CanSendNotification");

                    b.Property<int?>("IndividualId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.StudentFamilyMember", b =>
                {
                    b.Property<int>("FamilyMemberId");

                    b.Property<int>("StudentId");

                    b.Property<int>("Relationship");

                    b.HasKey("FamilyMemberId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentFamilyMember");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.Individual", b =>
                {
                    b.HasBaseType("Kindergarden.Domain.Entities.Person");

                    b.Property<string>("CellPhone");

                    b.Property<string>("Phone");

                    b.Property<string>("WorkPhone");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.Student", b =>
                {
                    b.HasBaseType("Kindergarden.Domain.Entities.Person");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.Group", b =>
                {
                    b.HasOne("Kindergarden.Domain.Entities.Individual", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.IndividualGroup", b =>
                {
                    b.HasOne("Kindergarden.Domain.Entities.Individual", "FamilyMember")
                        .WithMany("Groups")
                        .HasForeignKey("FamilyMemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kindergarden.Domain.Entities.Group", "Group")
                        .WithMany("FamilyMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.Message", b =>
                {
                    b.HasOne("Kindergarden.Domain.Entities.Student", "Regarding")
                        .WithMany()
                        .HasForeignKey("RegardingId");

                    b.HasOne("Kindergarden.Domain.Entities.Individual", "SentBy")
                        .WithMany("SentMessages")
                        .HasForeignKey("SentById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kindergarden.Domain.Entities.Individual", "SentTo")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("SentToId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kindergarden.Domain.Entities.MessageType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Kindergarden.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Kindergarden.Domain.Entities.Individual", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.Person", b =>
                {
                    b.HasOne("Kindergarden.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.PersonNotification", b =>
                {
                    b.HasOne("Kindergarden.Domain.Entities.Notification", "Notification")
                        .WithMany("IndividualNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kindergarden.Domain.Entities.Individual", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.Role", b =>
                {
                    b.HasOne("Kindergarden.Domain.Entities.Individual")
                        .WithMany("Roles")
                        .HasForeignKey("IndividualId");
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.StudentFamilyMember", b =>
                {
                    b.HasOne("Kindergarden.Domain.Entities.Individual", "FamilyMember")
                        .WithMany("Students")
                        .HasForeignKey("FamilyMemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kindergarden.Domain.Entities.Student", "Student")
                        .WithMany("FamilyMembers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kindergarden.Domain.Entities.Individual", b =>
                {
                    b.OwnsOne("Kindergarden.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("IndividualId");

                            b1.Property<string>("Address");

                            b1.HasKey("IndividualId");

                            b1.ToTable("Person");

                            b1.HasOne("Kindergarden.Domain.Entities.Individual")
                                .WithOne("Email")
                                .HasForeignKey("Kindergarden.Domain.ValueObjects.Email", "IndividualId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
